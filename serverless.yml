custom:
  project:
    name: battle-royale
  documentation:
    info:
      version: "0.5"
      title: "Battle Royale API"
      description: "This is the API for the currently unnamed Battle Royale IRL app"
      contact:
        name: "Patrick Huynh"
        email: "patrickhuynh97@gmail.com"
    tags:
      - name: "Authorization"
        description: "Endpoints for authorizing a Player or Gamemaster"
      - name: "Player Endpoints"
        description: "Endpoints where the calling user is modelled as a Player"
      - name: "Game Master Endpoints"
        description: "Endpoints where the calling user is modelled as a GameMaster"
      - name: "Test Endpoints"
        description: "Endpoints for generating test data"
    models: ${file(serverless_config/function_documentation/function_documentation.yml)} # todo break this up into smaller files
  commonModelSchemaFragments:
    # common fragments
    AuthorizationException:
      statusCode: '400'
      contentType: 'application/json'
      responseBody:
        description: "Lobby Error containing the type of error and a message"
      responseModels:
        "application/json": AuthorizationException
    GameMasterException:
      statusCode: '400'
      contentType: 'application/json'
      responseBody:
        description: "Game Master Error containing the type of error and a message"
      responseModels:
        "application/json": GameMasterException
    PlayerException:
      statusCode: '400'
      contentType: 'application/json'
      responseBody:
        description: "Player Error containing the type of error and a message"
      responseModels:
        "application/json": PlayerException
    LobbyException:
      statusCode: '400'
      contentType: 'application/json'
      responseBody:
        description: "Lobby Error containing the type of error and a message"
      responseModels:
        "application/json": LobbyException

service:
  name: api-service

provider:
  name: aws
  runtime: ${opt:runtime, 'python3.7'}
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  profile: ${opt:profile, 'personal'}
  websocketApiRouteSelectionExpression: $request.body.action
  deploymentBucket:
    name: ${self:custom.project.name}-dev
  versionFunctions: false
  stackTags:
    # Tag all resources that can be tagged e.g. lambdas, DynamoDB tables, ec2, etc.
    SERVICE:  ${self:service.name}
    PROJECT: ${self:custom.project.name}

  iamRoleStatements:
    - Effect: Allow  # God mode lambda
      Action: "*"
      Resource: "*"

functions:
  - ${file(serverless_config/functions/account-functions.yml)}
  - ${file(serverless_config/functions/player-functions.yml)}
  - ${file(serverless_config/functions/game-master-functions.yml)}
  - ${file(serverless_config/functions/websocket-functions.yml)}
  - ${file(serverless_config/functions/test-functions.yml)}

package:
  include:
    - 'db/*'
    - 'handlers/*'
    - 'models/*'
    - 'serverless_config/*'
    - 'websockets/*'
    - 'sqs/*'

  exclude:
    - 'node_modules'
    - 'tests/*'

plugins:
  - serverless-python-requirements
  - serverless-aws-documentation
  - serverless-plugin-split-stacks
resources:
  - ${file(serverless_config/resources/dynamo-db.yml)}
  - ${file(serverless_config/resources/cognito-user-pool.yml)}
  - ${file(serverless_config/resources/sqs.yml)}