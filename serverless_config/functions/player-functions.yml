createSquad:
  handler: handlers.player_handlers.create_squad_handler
  events:
    - http:
        path: /player/squads
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
        documentation:
          summary: "Create a squad owned by calling user"
          tags:
            - "Player Endpoints"
          requestBody:
            description: "JSON containing name of squad to be created"
          requestModels:
            "application/json": PlayerSquadRequest
          methodResponses:
            - statusCode: "200"
              responseBody:
                description: "None"
            - ${self:custom.commonModelSchemaFragments.PlayerException}
  environment:
    USER_POOL_CLIENT_ID:
      Ref: CognitoUserPoolClient
    USER_POOL_ID:
      Ref: CognitoUserPool
    TABLE:
      Fn::GetAtt: [BattleRoyaleTable, Arn]

deleteSquad:
  handler: handlers.player_handlers.delete_squad_handler
  events:
    - http:
        path: /player/squads
        method: delete
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
        documentation:
          summary: "Delete a squad owned by calling user"
          tags:
            - "Player Endpoints"
          requestBody:
            description: "JSON containing name of squad to be deleted"
          requestModels:
            "application/json": PlayerSquadRequest
          methodResponses:
            - statusCode: "200"
              responseBody:
                description: "None"
            - ${self:custom.commonModelSchemaFragments.PlayerException}
  environment:
    USER_POOL_CLIENT_ID:
      Ref: CognitoUserPoolClient
    USER_POOL_ID:
      Ref: CognitoUserPool
    TABLE:
      Fn::GetAtt: [BattleRoyaleTable, Arn]

addUserToSquad:
  handler: handlers.player_handlers.add_user_to_squad_handler
  events:
    - http:
        path: /player/squads/{squadname}/member
        request:
          parameters:
            paths:
              squadname: true
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
        documentation:
          summary: "Add a Player to a squad owned by calling user"
          tags:
            - "Player Endpoints"
          requestBody:
            description: "JSON containing name of username of User to be added to the squad"
          requestModels:
            "application/json": UsernameSchema
          methodResponses:
            - statusCode: "200"
              responseBody:
                description: "None"
            - ${self:custom.commonModelSchemaFragments.PlayerException}
  environment:
    USER_POOL_CLIENT_ID:
      Ref: CognitoUserPoolClient
    USER_POOL_ID:
      Ref: CognitoUserPool
    TABLE:
      Fn::GetAtt: [BattleRoyaleTable, Arn]

removeMemberFromSquad:
  handler: handlers.player_handlers.remove_member_from_squad_handler
  events:
    - http:
        path: /player/squads/{squadname}/member
        request:
          parameters:
            paths:
              squadname: true
        method: delete
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
        documentation:
          summary: "Remove a Player from a squad owned by calling user"
          tags:
            - "Player Endpoints"
          requestBody:
            description: "JSON containing username of User to be removed from the squad"
          requestModels:
            "application/json": UsernameSchema
          methodResponses:
            - statusCode: "200"
              responseBody:
                description: "None"
            - ${self:custom.commonModelSchemaFragments.PlayerException}
  environment:
    USER_POOL_CLIENT_ID:
      Ref: CognitoUserPoolClient
    USER_POOL_ID:
      Ref: CognitoUserPool
    TABLE:
      Fn::GetAtt: [BattleRoyaleTable, Arn]

getOwnedSquads:
  handler: handlers.player_handlers.get_owned_squads_handler
  events:
    - http:
        path: /player/squads/me
        method: get
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
        documentation:
          summary: "Get a list of squads owned by calling user"
          tags:
            - "Player Endpoints"
          methodResponses:
            - statusCode: "200"
              responseBody:
                description: "List of Squads owned by calling user"
              responseModels:
                "application/json": GetSquadsResponse
            - ${self:custom.commonModelSchemaFragments.PlayerException}
  environment:
    USER_POOL_CLIENT_ID:
      Ref: CognitoUserPoolClient
    USER_POOL_ID:
      Ref: CognitoUserPool
    TABLE:
      Fn::GetAtt: [BattleRoyaleTable, Arn]

getNotOwnedSquads:
  handler: handlers.player_handlers.get_not_owned_squads_handler
  events:
    - http:
        path: /player/squads/others
        method: get
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
        documentation:
          summary: "Get a list of squads not owned by calling user that they are in"
          tags:
            - "Player Endpoints"
          methodResponses:
            - statusCode: "200"
              responseBody:
                description: "List of Squads calling user is in but does not own"
              responseModels:
                "application/json": GetSquadsResponse
            - ${self:custom.commonModelSchemaFragments.PlayerException}
  environment:
    USER_POOL_CLIENT_ID:
      Ref: CognitoUserPoolClient
    USER_POOL_ID:
      Ref: CognitoUserPool
    TABLE:
      Fn::GetAtt: [BattleRoyaleTable, Arn]

getCurrentLobby:
  handler: handlers.player_handlers.get_current_lobby_handler
  events:
    - http:
        path: /player/lobby
        method: get
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
        documentation:
          summary: "Get information about Lobby player is in"
          tags:
            - "Player Endpoints"
          methodResponses:
            - statusCode: "200"
              responseBody:
                description: "Lobby that calling user is currently in"
              responseModels:
                "application/json": GetLobbyAsPlayerResponse
            - ${self:custom.commonModelSchemaFragments.PlayerException}
  environment:
    USER_POOL_CLIENT_ID:
      Ref: CognitoUserPoolClient
    USER_POOL_ID:
      Ref: CognitoUserPool
    TABLE:
      Fn::GetAtt: [BattleRoyaleTable, Arn]

setDead:
  handler: handlers.player_handlers.set_dead_handler
  events:
    - http:
        path: /player/dead
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
        documentation:
          summary: "Sets the calling user as dead in their current lobby"
          tags:
            - "Player Endpoints"
          methodResponses:
            - statusCode: "200"
              responseBody:
                description: "None"
            - ${self:custom.commonModelSchemaFragments.PlayerException}
  environment:
    USER_POOL_CLIENT_ID:
      Ref: CognitoUserPoolClient
    USER_POOL_ID:
      Ref: CognitoUserPool
    TABLE:
      Fn::GetAtt: [BattleRoyaleTable, Arn]

setAlive:
  handler: handlers.player_handlers.set_dead_handler
  events:
    - http:
        path: /player/alive
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
        documentation:
          summary: "Sets the calling user as alive in their current lobby"
          tags:
            - "Player Endpoints"
          methodResponses:
            - statusCode: "200"
              responseBody:
                description: "None"
            - ${self:custom.commonModelSchemaFragments.PlayerException}
  environment:
    USER_POOL_CLIENT_ID:
      Ref: CognitoUserPoolClient
    USER_POOL_ID:
      Ref: CognitoUserPool
    TABLE:
      Fn::GetAtt: [BattleRoyaleTable, Arn]

pullSquadFromLobby:
  handler: handlers.player_handlers.pull_squad_from_lobby_handler
  events:
    - http:
        path: /player/squads/{squadname}/leave-lobby
        request:
          parameters:
            paths:
              squadname: true
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
        documentation:
          summary: "If calling user is in a lobby with a Squad they own, leave the lobby with all squad members"
          tags:
            - "Player Endpoints"
          methodResponses:
            - statusCode: "200"
              responseBody:
                description: "None"
            - ${self:custom.commonModelSchemaFragments.PlayerException}
  environment:
    USER_POOL_CLIENT_ID:
      Ref: CognitoUserPoolClient
    USER_POOL_ID:
      Ref: CognitoUserPool
    TABLE:
      Fn::GetAtt: [BattleRoyaleTable, Arn]
